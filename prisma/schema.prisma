// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(cuid())
  email       String   @unique
  name        String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  imagePrompts     ImagePrompt[]
  languagePrompts     LanguagePrompt[]
  comments    Comment[]
  likes     Like[]
  followers   UserFollow[] @relation("Followers")
  following   UserFollow[] @relation("Following")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ImagePrompt {
  id String @id @default(cuid())
  promptInput String
  negativePrompt String?
  model String
  outputImage String
  imageWidth Int
  imageHeight Int
  likes Like[]
  comments Comment[]
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LanguagePrompt {
  id String @id @default(cuid())
  promptInput String
  usage String
  output String?
  likes Like[]
  comments Comment[]
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Prompt {
//   id          String      @id @default(cuid())
//   // need to update to required
//   promptInput     String?
//   negativePrompt String?
//   // need to update to required
//   type       String?
//   model       String? 
//   output      String?
//   image      String?
//   upvotes     Upvote[]
//   comments    Comment[]
//   author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
//   authorId    String
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

model Comment {
  id          String      @id @default(cuid())
  content     String
  imagePrompt      ImagePrompt   @relation(fields: [imagePromptId], references: [id], onDelete: Cascade)
  imagePromptId    String
  languagePrompt      LanguagePrompt   @relation(fields: [languagePromptId], references: [id], onDelete: Cascade)
  languagePromptId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Like {
  id          String      @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  imagePrompt      ImagePrompt?   @relation(fields: [imagePromptId], references: [id], onDelete: Cascade)
  imagePromptId    String?
  languagePrompt      LanguagePrompt?   @relation(fields: [languagePromptId], references: [id], onDelete: Cascade)
  languagePromptId    String?
  createdAt   DateTime @default(now())

  @@unique([userId, imagePromptId])
  @@unique([userId, languagePromptId])
}

model UserFollow {
  id           String      @id @default(cuid())
  following         User     @relation("Following", fields: [followingId], references: [id])
  followingId       String
  follower     User     @relation("Followers", fields: [followerId], references: [id])
  followerId   String
  createdAt    DateTime @default(now())
}

