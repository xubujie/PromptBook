// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(cuid())
  email       String   @unique
  name        String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  prompts     Prompt[]
  comments    Comment[]
  likes       Like[]
  followers   UserFollow[] @relation("Followers")
  following   UserFollow[] @relation("Following")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Prompt {
  id String @id @default(cuid())
  title String?
  type String  // image, language, etc
  prompt String
  model String?
  negativePrompt String?
  imageWidth Int?
  imageHeight Int?
  image  String?
  link String?
  likes Like[]
  comments Comment[]
  author User @relation(fields: [authorEmail], references: [email], onDelete: Cascade)
  authorEmail String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id          String      @id @default(cuid())
  content     String
  prompt      Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptId     String
  author      User     @relation(fields: [authorEmail], references: [email], onDelete: Cascade)
  authorEmail    String   
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Like {
  id          String      @id @default(cuid())
  user        User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail      String
  prompt      Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptId    String
  createdAt   DateTime @default(now())

  @@unique([userEmail, promptId])
}

model UserFollow {
  id           String      @id @default(cuid())
  following         User     @relation("Following", fields: [followingEmail], references: [id])
  followingEmail      String
  follower     User     @relation("Followers", fields: [followerEmail], references: [id])
  followerEmail   String
  createdAt    DateTime @default(now())
}

